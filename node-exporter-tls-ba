Managing Node Exporter Certificates with Kubernetes Secrets

Since v1.6.0, Prometheus Node Exporter officially supports native TLS and Basic Auth configuration through the --web.config.file parameter, eliminating the need for nginx or proxy sidecars.

Best Practice: Use self-signed certificates + Node Exporter native TLS & Basic Auth support

Overview

We will:
1. Manually create self-signed certificates and store them as Kubernetes Secrets
2. Prepare a web.config.yaml file to configure TLS and Basic Auth
3. Use Node Exporter parameter --web.config.file=/etc/node_exporter/web.config.yaml to enable authentication and HTTPS
4. Configure Basic Auth + TLS Scrape in Prometheus

Detailed Steps

Step 1: Generate Self-Signed Certificates and Create Secrets

First, generate self-signed certificates locally:

# 1. Generate CA private key
openssl genrsa -out ca.key 4096

# 2. Generate CA certificate (self-signed)
openssl req -x509 -new -nodes -key ca.key -sha256 -days 3650 -out ca.crt \
  -subj "/C=CN/ST=Shanghai/O=MyOrg, Inc./CN=MyPrometheusCA"

# 3. Generate server private key
openssl genrsa -out node-exporter.key 2048

# 4. Create certificate signing request configuration file
cat > server.csr.cnf << "EOF"
[req]
default_bits = 2048
prompt = no
default_md = sha256
req_extensions = req_ext
distinguished_name = dn

[dn]
C = CN
ST = Shanghai
O = MyOrg, Inc.
CN = node-exporter.${NAMESPACE}.svc

[req_ext]
subjectAltName = @alt_names

[alt_names]
DNS.1 = node-exporter
DNS.2 = node-exporter.${NAMESPACE}
DNS.3 = node-exporter.${NAMESPACE}.svc
DNS.4 = node-exporter.${NAMESPACE}.svc.cluster.local
EOF

# 5. Generate certificate signing request
openssl req -new -key node-exporter.key -out tls.csr -config server.csr.cnf

# 6. Create certificate extension configuration file
cat > ca.ext << "EOF"
authorityKeyIdentifier=keyid,issuer
basicConstraints=CA:FALSE
keyUsage = digitalSignature, nonRepudiation, keyEncipherment, dataEncipherment
extendedKeyUsage = serverAuth
subjectAltName = @alt_names

[alt_names]
DNS.1 = node-exporter
DNS.2 = node-exporter.${NAMESPACE}
DNS.3 = node-exporter.${NAMESPACE}.svc
DNS.4 = node-exporter.${NAMESPACE}.svc.cluster.local
EOF

# 7. Use CA to sign and generate final certificate
openssl x509 -req -in tls.csr -CA ca.crt -CAkey ca.key -CAcreateserial \
  -out node-exporter.crt -days 365 -sha256 -extfile ca.ext

# 8. Clean up temporary files
rm -f tls.csr server.csr.cnf ca.ext ca.srl

# 9. Create Kubernetes Secret
kubectl delete secret node-exporter-cert-secret -n ${NAMESPACE} --ignore-not-found=true
kubectl create secret tls node-exporter-cert-secret \
  --cert=node-exporter.crt \
  --key=node-exporter.key \
  -n ${NAMESPACE}

Step 2: Create Basic Auth Password File (htpasswd)

htpasswd -nbB ${USERNAME} ${PASSWORD}
# Output: ${USERNAME}:${BCRYPT_HASH}

echo -n "${USERNAME}:${PASSWORD}" | base64
# Output: ${BASE64_ENCODED_CREDENTIALS}

kubectl delete secret node-exporter-basic-auth -n ${NAMESPACE} --ignore-not-found=true
kubectl create secret generic node-exporter-basic-auth \
  --from-literal=username=${USERNAME} \
  --from-literal=password='${PASSWORD}' \
  -n ${NAMESPACE}

Step 3: Create web.config.yaml Configuration File as ConfigMap

Create a web-config.yaml file with the following content:

# Generate bcrypt hash (password: ${PASSWORD})
htpasswd -nbB ${USERNAME} ${PASSWORD}
# Output: ${USERNAME}:${BCRYPT_HASH}

# Create web.config.yaml file
cat > web-config.yaml << "EOF"
tls_server_config:
  cert_file: /etc/node_exporter/tls/tls.crt
  key_file: /etc/node_exporter/tls/tls.key
basic_auth_users:
  ${USERNAME}: ${BCRYPT_HASH}
EOF

# Create ConfigMap
kubectl delete configmap node-exporter-web-config -n ${NAMESPACE} --ignore-not-found=true
kubectl create configmap node-exporter-web-config --from-file=web.config.yaml=web-config.yaml -n ${NAMESPACE}

Step 4: Mount Certificates & Config in Node Exporter

If using Helm to install kube-prometheus-stack, add the following content to values.yaml:

nodeExporter:
  extraArgs:
    - --web.config.file=/etc/node_exporter/web.config.yaml
  
  extraVolumes:
    - name: tls-secret
      secret:
        secretName: node-exporter-cert-secret
    - name: web-config
      configMap:
        name: node-exporter-web-config
  
  extraVolumeMounts:
    - name: tls-secret
      mountPath: /etc/node_exporter/tls
      readOnly: true
    - name: web-config
      mountPath: /etc/node_exporter/web.config.yaml
      subPath: web.config.yaml
      readOnly: true

Note: When mountPath is a file, subPath is required.

Helm Update Operations

After saving the above configuration to the values.yaml file, use the following commands to update Node Exporter:

# If installing for the first time
helm install monitoring-operator prometheus-community/kube-prometheus-stack -f values.yaml

# If already installed, update the configuration
helm upgrade monitoring-operator prometheus-community/kube-prometheus-stack -f values.yaml

Check and confirm Helm update status:

# Check Helm release status
helm status monitoring-operator

# Check Node Exporter Pod status
kubectl get pods -n ${NAMESPACE} -l app.kubernetes.io/name=prometheus-node-exporter

# Check Node Exporter Pod details
kubectl describe pod -n ${NAMESPACE} -l app.kubernetes.io/name=prometheus-node-exporter

# Check Node Exporter logs
kubectl logs -n ${NAMESPACE} -l app.kubernetes.io/name=prometheus-node-exporter

Ensure the Pod is running normally without error logs.

Verification Steps

# 1. Check pod status
kubectl get pods -n ${NAMESPACE} -l app.kubernetes.io/name=prometheus-node-exporter

# 2. Check certificate secret
kubectl get secret node-exporter-cert-secret -n ${NAMESPACE}

# 3. Check web config
kubectl get configmap node-exporter-web-config -n ${NAMESPACE}

# 4. Check logs (should have no bcrypt errors)
kubectl logs -n ${NAMESPACE} -l app.kubernetes.io/name=prometheus-node-exporter --tail=5

# 5. Test access
kubectl port-forward -n ${NAMESPACE} svc/monitoring-operator-prometheus-node-exporter 9100:9100 &
sleep 3
curl -k -u ${USERNAME}:${PASSWORD} https://localhost:9100/metrics | head -5
pkill -f "kubectl port-forward"

Step 5: Modify ServiceMonitor to Support Basic Auth + TLS

Create a servicemonitor.yaml file:

apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: node-exporter
  namespace: ${NAMESPACE}
spec:
  endpoints:
    - port: http-metrics
      scheme: https
      path: /metrics
      tlsConfig:
        insecureSkipVerify: true
      basicAuth:
        username:
          name: node-exporter-basic-auth
          key: username
        password:
          name: node-exporter-basic-auth
          key: password
  selector:
    matchLabels:
      app.kubernetes.io/name: prometheus-node-exporter
  namespaceSelector:
    matchNames:
      - ${NAMESPACE}

Note: ServiceMonitor will be created automatically, no need to create manually. If customization is needed, create the above file.

Success Indicators

- You can access Node Exporter's port (e.g., curl -k -u ${USERNAME}:${PASSWORD} https://<podIP>:9100/metrics)
- Prometheus Targets page shows Node Exporter status as UP

# Test TLS + Basic Auth
curl -k -u ${USERNAME}:${PASSWORD} https://localhost:9100/metrics

# Test TLS (should return 401 Unauthorized)
curl -k https://localhost:9100/metrics

# Port forward test
kubectl port-forward -n ${NAMESPACE} svc/monitoring-operator-prometheus-node-exporter 9100:9100 &
curl -k -u ${USERNAME}:${PASSWORD} https://localhost:9100/metrics

Troubleshooting

Common Issues

1. bcrypt Error:
   crypto/bcrypt: bcrypt hashes must start with '$', but hashedSecret started with 'a'
   Solution: Ensure basic_auth_users only contains bcrypt hash values, not username prefixes.

2. Health Check Failure:
   Readiness probe failed: HTTP probe failed with statuscode: 401
   Solution: Check if the Authorization header is correct, should be base64 encoded ${USERNAME}:${PASSWORD}.

3. Certificate Error:
   TLS handshake error: client sent an HTTP request to an HTTPS server
   Solution: This is normal, indicating TLS is working, client needs to use HTTPS.

4. Helm Upgrade Not Effective:
   Solution: Delete all pods to let them recreate:
   kubectl delete pods -n ${NAMESPACE} -l app.kubernetes.io/name=prometheus-node-exporter

Verification Commands

# Check web.config.yaml content
kubectl get configmap node-exporter-web-config -n ${NAMESPACE} -o jsonpath='{.data.web\.config\.yaml}'

# Check Authorization header in pod
kubectl get pod -n ${NAMESPACE} -l app.kubernetes.io/name=prometheus-node-exporter -o yaml | grep -A 2 "Authorization"

# Test Basic Auth
curl -k -u ${USERNAME}:${PASSWORD} https://localhost:9100/metrics

Summary

| Feature | Supported | Implementation |
|---------|-----------|----------------|
| TLS Encryption | Yes | Node Exporter native via web.config.yaml |
| Basic Auth | Yes | Built-in configuration |
| Self-signed Certificate Management | Yes | Manual creation and storage as Secret |
| Helm Support | Yes | extraArgs, extraVolumes, extraVolumeMounts |

Complete Operation Steps Verification

Pre-check Checklist

Before starting configuration, ensure the following environment is ready:

# 1. Check Kubernetes cluster status
kubectl cluster-info
kubectl get nodes

# 2. Check if namespace exists
kubectl get namespace ${NAMESPACE}
# If not exists, create namespace
kubectl create namespace ${NAMESPACE}

# 3. Check if Helm is installed
helm version

# 4. Check if necessary tools are available
which openssl
which htpasswd
which curl

Complete Verification Process

Step 1: Certificate and Key Verification

# Verify certificate files exist and are valid
ls -la node-exporter.crt node-exporter.key ca.crt ca.key

# Verify certificate content
openssl x509 -in node-exporter.crt -text -noout | grep -E "(Subject:|DNS:|Validity)"

# Verify private key
openssl rsa -in node-exporter.key -check -noout

# Verify certificate chain
openssl verify -CAfile ca.crt node-exporter.crt

Step 2: Kubernetes Resource Verification

# Verify Secret is correctly created
kubectl get secret node-exporter-cert-secret -n ${NAMESPACE} -o yaml

# Verify certificate data in Secret
kubectl get secret node-exporter-cert-secret -n ${NAMESPACE} -o jsonpath='{.data.tls\.crt}' | base64 -d | openssl x509 -text -noout

# Verify Basic Auth Secret
kubectl get secret node-exporter-basic-auth -n ${NAMESPACE} -o yaml

# Verify ConfigMap
kubectl get configmap node-exporter-web-config -n ${NAMESPACE} -o yaml

Step 3: Helm Deployment Verification

# Check Helm release status
helm list -n ${NAMESPACE}
helm status monitoring-operator -n ${NAMESPACE}

# Check Node Exporter Pod status
kubectl get pods -n ${NAMESPACE} -l app.kubernetes.io/name=prometheus-node-exporter

# Check Pod details
kubectl describe pod -n ${NAMESPACE} -l app.kubernetes.io/name=prometheus-node-exporter

# Check mount points in Pod
kubectl exec -n ${NAMESPACE} -l app.kubernetes.io/name=prometheus-node-exporter -- ls -la /etc/node_exporter/

# Check if web.config.yaml is correctly mounted
kubectl exec -n ${NAMESPACE} -l app.kubernetes.io/name=prometheus-node-exporter -- cat /etc/node_exporter/web.config.yaml

Step 4: Service Verification

# Check if Service is correctly created
kubectl get svc -n ${NAMESPACE} -l app.kubernetes.io/name=prometheus-node-exporter

# Check Service details
kubectl describe svc -n ${NAMESPACE} -l app.kubernetes.io/name=prometheus-node-exporter

# Check Endpoints
kubectl get endpoints -n ${NAMESPACE} -l app.kubernetes.io/name=prometheus-node-exporter

Step 5: Function Verification

# 1. Port forward test
kubectl port-forward -n ${NAMESPACE} svc/monitoring-operator-prometheus-node-exporter 9100:9100 &
PF_PID=$!

# Wait for port forward to establish
sleep 3

# 2. Test HTTPS access (should return 401)
echo "Testing HTTPS access without authentication (should return 401):"
curl -k -s -o /dev/null -w "%{http_code}" https://localhost:9100/metrics

# 3. Test Basic Auth access
echo "Testing Basic Auth access:"
curl -k -u ${USERNAME}:${PASSWORD} https://localhost:9100/metrics | head -10

# 4. Test wrong password
echo "Testing wrong password (should return 401):"
curl -k -u ${USERNAME}:wrongpassword https://localhost:9100/metrics -s -o /dev/null -w "%{http_code}"

# 5. Test HTTP access (should fail)
echo "Testing HTTP access (should fail):"
curl -s http://localhost:9100/metrics -o /dev/null -w "%{http_code}" || echo "Connection refused"

# Clean up port forward
kill $PF_PID

Step 6: Prometheus Integration Verification

# Check if ServiceMonitor is correctly created
kubectl get servicemonitor -n ${NAMESPACE}

# Check Prometheus configuration
kubectl get prometheus -n ${NAMESPACE}

# Check Prometheus Pod status
kubectl get pods -n ${NAMESPACE} -l app.kubernetes.io/name=prometheus

# Check if Prometheus configuration includes Node Exporter
kubectl port-forward -n ${NAMESPACE} svc/monitoring-operator-prometheus 9090:9090 &
sleep 3

# Access Prometheus UI to check Targets
echo "Please access http://localhost:9090 in browser and check Targets page"
echo "Node Exporter should show as UP status"

# Check Prometheus configuration
curl -s http://localhost:9090/api/v1/targets | jq '.data.activeTargets[] | select(.labels.job == "node-exporter")'

kill %1

Step 7: Log and Monitoring Verification

# Check Node Exporter logs
echo "=== Node Exporter Logs ==="
kubectl logs -n ${NAMESPACE} -l app.kubernetes.io/name=prometheus-node-exporter --tail=20

# Check for errors
kubectl logs -n ${NAMESPACE} -l app.kubernetes.io/name=prometheus-node-exporter | grep -i error

# Check Prometheus logs
echo "=== Prometheus Logs ==="
kubectl logs -n ${NAMESPACE} -l app.kubernetes.io/name=prometheus --tail=20

# Check Prometheus Operator logs
echo "=== Prometheus Operator Logs ==="
kubectl logs -n ${NAMESPACE} -l app.kubernetes.io/name=prometheus-operator --tail=20

Advanced Troubleshooting

Certificate Related Issues

# Check if certificate is expired
openssl x509 -in node-exporter.crt -noout -dates

# Check certificate SAN extension
openssl x509 -in node-exporter.crt -noout -text | grep -A 10 "Subject Alternative Name"

# Verify certificate matches private key
openssl x509 -noout -modulus -in node-exporter.crt | openssl md5
openssl rsa -noout -modulus -in node-exporter.key | openssl md5

Network Connection Issues

# Check Pod network connection
kubectl exec -n ${NAMESPACE} -l app.kubernetes.io/name=prometheus-node-exporter -- curl -k -u ${USERNAME}:${PASSWORD} https://localhost:9100/metrics

# Check Service to Pod connection
kubectl exec -n ${NAMESPACE} -l app.kubernetes.io/name=prometheus-node-exporter -- curl -k -u ${USERNAME}:${PASSWORD} https://node-exporter.${NAMESPACE}.svc:9100/metrics

# Check DNS resolution
kubectl exec -n ${NAMESPACE} -l app.kubernetes.io/name=prometheus-node-exporter -- nslookup node-exporter.${NAMESPACE}.svc

Configuration Verification

# Verify web.config.yaml syntax
kubectl exec -n ${NAMESPACE} -l app.kubernetes.io/name=prometheus-node-exporter -- cat /etc/node_exporter/web.config.yaml

# Verify Node Exporter parameters
kubectl exec -n ${NAMESPACE} -l app.kubernetes.io/name=prometheus-node-exporter -- ps aux | grep node_exporter

# Verify mount points
kubectl exec -n ${NAMESPACE} -l app.kubernetes.io/name=prometheus-node-exporter -- mount | grep node_exporter

Performance Monitoring

# Check Node Exporter metrics collection
curl -k -u ${USERNAME}:${PASSWORD} https://localhost:9100/metrics | grep -E "(node_exporter_build_info|node_exporter_scrape_duration_seconds)"

# Check memory usage
kubectl top pods -n ${NAMESPACE} -l app.kubernetes.io/name=prometheus-node-exporter

# Check CPU usage
kubectl exec -n ${NAMESPACE} -l app.kubernetes.io/name=prometheus-node-exporter -- cat /proc/cpuinfo | grep processor | wc -l

Success Criteria Checklist

Complete the following checklist to confirm successful configuration:

- Certificate and key files exist and are valid
- Kubernetes Secret and ConfigMap correctly created
- Node Exporter Pod is in Running state
- Health checks pass (liveness and readiness probe)
- HTTPS access requires authentication (returns 401)
- Basic Auth authentication successful (returns metrics data)
- HTTP access is rejected
- Prometheus Targets page shows Node Exporter as UP
- No error logs
- Metrics data collection normal

Emergency Recovery Steps

If configuration issues occur, follow these recovery steps:

# 1. Delete all related resources
kubectl delete pods -n ${NAMESPACE} -l app.kubernetes.io/name=prometheus-node-exporter
kubectl delete secret node-exporter-cert-secret -n ${NAMESPACE}
kubectl delete secret node-exporter-basic-auth -n ${NAMESPACE}
kubectl delete configmap node-exporter-web-config -n ${NAMESPACE}

# 2. Recreate resources
# (Re-execute creation commands from Step 1 to Step 3)

# 3. Redeploy Helm
helm upgrade monitoring-operator prometheus-community/kube-prometheus-stack -f values.yaml

# 4. Verify recovery
kubectl get pods -n ${NAMESPACE} -l app.kubernetes.io/name=prometheus-node-exporter

Configuration Backup

Recommend regular backup of important configurations:

# Backup certificates and keys
cp node-exporter.crt node-exporter.crt.backup
cp node-exporter.key node-exporter.key.backup
cp ca.crt ca.crt.backup
cp ca.key ca.key.backup

# Backup Kubernetes resources
kubectl get secret node-exporter-cert-secret -n ${NAMESPACE} -o yaml > node-exporter-cert-secret.yaml
kubectl get secret node-exporter-basic-auth -n ${NAMESPACE} -o yaml > node-exporter-basic-auth.yaml
kubectl get configmap node-exporter-web-config -n ${NAMESPACE} -o yaml > node-exporter-web-config.yaml

# Backup values.yaml
cp values.yaml values.yaml.backup

Quick Verification Commands

For quick verification of the setup:

# Check Node Exporter status
kubectl get pods -n ${NAMESPACE} -l app.kubernetes.io/name=prometheus-node-exporter

# Test TLS + Basic Auth
kubectl port-forward -n ${NAMESPACE} svc/monitoring-operator-prometheus-node-exporter 9100:9100 &
curl -k -u ${USERNAME}:${PASSWORD} https://localhost:9100/metrics | head -5
pkill -f "kubectl port-forward"

# Check Prometheus targets
kubectl port-forward -n ${NAMESPACE} svc/monitoring-operator-kube-p-prometheus --address 0.0.0.0 9090:9090
curl -s "http://192.168.5.200:9090/api/v1/targets" | jq -r '.data.activeTargets[] | select(.labels.job == "node-exporter") | "\(.labels.job) - \(.labels.instance) - \(.health) - \(.lastError)"'

This completes your comprehensive Node Exporter TLS + Basic Auth configuration solution!

Variables Reference

The following variables should be defined before executing the commands:

${NAMESPACE} - The Kubernetes namespace where Node Exporter will be deployed
${USERNAME} - The username for Basic Auth authentication
${PASSWORD} - The password for Basic Auth authentication
${BCRYPT_HASH} - The bcrypt hash of the password (generated by htpasswd)
${BASE64_ENCODED_CREDENTIALS} - Base64 encoded username:password string
